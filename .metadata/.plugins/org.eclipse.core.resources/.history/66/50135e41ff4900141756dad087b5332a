package com.dauntless.project;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import android.support.v7.app.ActionBarActivity;
import android.app.ActionBar;
import android.app.ActionBar.Tab;
import android.app.FragmentTransaction;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;

public class FamiliesCircleActivity extends ActionBarActivity {
	boolean hasCreated = false;
	FamilyAdmin familyAdmin;
	
	HttpClient httpclient;
	HttpGet request;
	HttpResponse response;
	String url;
	String phoneNumber;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_families);
		ConnectionClient cc = new ConnectionClient();
        url = cc.getUrl();
		Log.i("test","FamiliesCircleActivity");
		
		//TODO Hardcoded value of phone number
		phoneNumber = "9172174900000000000";
		
		new MyTask().execute();
		
		Bundle data = getIntent().getExtras();
		if(data == null)
		{
			Log.i("Data", "NULL");
		}
		else
		{
			familyAdmin = (FamilyAdmin) data.getParcelable("familyAdmin");
			Log.i("Family Admin", familyAdmin.getName());
			
			//TODO GIVE BERNARD THESE 3 DETAILS FROM THE ACTIVITY BEFORE THIS TOGETHER WITH
			// THE PHONE NUMBER**
			hasCreated = true; //hasCreatedFlag
			//This function might not be needed with fetch
			//ADD TAB CODE BELOW
		}
		
		
		
		final ActionBar actionBar = getActionBar();
		// Specify that tabs should be displayed in the action bar.
	    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

	    // Create a tab listener that is called when the user changes tabs.
	    final ActionBar.TabListener tabListener = new ActionBar.TabListener() {
	        public void onTabSelected(ActionBar.Tab tab, FragmentTransaction ft) {
	            // show the given tab
	        

			}

			@Override
			public void onTabUnselected(Tab tab, FragmentTransaction ft) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onTabReselected(Tab tab, FragmentTransaction ft) {
				// TODO Auto-generated method stub
				
			}
	    };

	    /*/ Add 3 tabs, specifying the tab's text and TabListener
	    for (int i = 0; i < 3; i++) {
	        actionBar.addTab(
	                actionBar.newTab()
	                        //.setText("Tab " + (i + 1))
	                        .setText("Low's Family")
	                		.setTabListener(tabListener));
	    }*/
	    
	    if(hasCreated)
	    {
    	actionBar.addTab(
                actionBar.newTab().setText(familyAdmin.getName() + " Family").setTabListener(tabListener));            		
	    }

        final Button button = (Button) findViewById(R.id.createFamilyBtn);
        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
            	           	
            	Intent intent = new Intent(FamiliesCircleActivity.this, CreateFamilyActivity.class);
        	    startActivity(intent);
        	    
        	    
            }
        });


	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.families, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	private class MyTask extends AsyncTask<Void, Void, Void>
	{		
		 //TextView result = (TextView) findViewById(R.id.tvResult);
		 //EditText test = (EditText) findViewById(R.id.editText1);

		 int statusCode;
		 String line;
		 String text;
		 String json;
		 int indexStart;
			int indexEnd;
			StringBuilder builder = new StringBuilder();
		    @Override
		    protected Void doInBackground(Void... params) {
		     
		    	try {
		    		System.setProperty("http.keepAlive", "false");
					httpclient = new DefaultHttpClient();
					HttpPost httppost = new HttpPost(url);
					
					List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
				    nameValuePairs.add(new BasicNameValuePair("phoneNumber", phoneNumber));
				    nameValuePairs.add(new BasicNameValuePair("functionCall", "3"));
				    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

					response = httpclient.execute(httppost);
					Log.v("response code", response.getStatusLine()
                            .getStatusCode() + ""); 
					Log.i("retrieval status", "Successful!");				
					json = EntityUtils.toString(response.getEntity());
					
					indexStart = json.indexOf("{");
					indexEnd = json.indexOf("}");
					json = json.substring(indexStart, indexEnd+1);
					
					JSONObject jobj = new JSONObject(json);
					String data = jobj.names().getString(4);
					//JSONArray data = jobj.getJSONArray("familyID");
					
					Log.i("jsonClass", json.getClass().toString());
					
					Log.i("jsonData", data.toString());
					Log.i("error",json);					

				}

				catch (Exception e) {
					Log.e("error", e.toString());
					
				}

		     return null;
		     
		    }
		    
		    @Override
		    protected void onPostExecute(Void result) {
		     
		    	try {
					
				} catch (Exception e) {
					// Code to handle exception
				} 
		     
		     super.onPostExecute(result);   
		    }

		   }
}
